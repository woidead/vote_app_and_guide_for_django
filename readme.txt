py -m django --version
Вы можете узнать, установлена ли Django и какая версия, выполнив в командной строке следующую команду

django-admin startproject mysite .
Это создаст каталог mysite в текущем каталоге




Внешний корневой каталог mysite/ — это контейнер для вашего проекта. Его имя не имеет значения для Джанго; Вы можете 
переименовать его на что угодно.

manage.py: утилита, позволяющая взаимодействовать с проектом различными способами. 

Внутренний каталог mysite/ это Python модуль вашего проекта. Его название вы будете использовать для импорта чего-либо
из этого модуля (например, mysite.urls).

mysite/__init__.py: пустой файл, который сообщает Python, что этот каталог должен рассматриваться как пакет Python’а

mysite/settings.py: Конфигурация и настройки проекта Django. В Настройки Django рассказано все о том, как работают настройки.

mysite/urls.py: указание URL проекта на Django, можно сказать, что это «оглавление» вашего проекта

mysite/asgi.py: точка входа для ASGI-совместимых веб-серверов для обслуживания вашего проекта

mysite/wsgi.py: Точка входа для WSGI совместимых веб-серверов для работы с проектом



Давайте проверим, работает ли ваш проект Django. Перейдите во внешний каталог mysite, если вы этого еще не сделали, и выполните 
следующие команды:
py manage.py runserver

Вы запустили сервер разработки Django - легкий веб-сервер, написанный исключительно на Python. Мы включили его в Django
Теперь, когда сервер запущен, зайдите на сайт http://127.0.0.1:8000/ с помощью веб-браузера. Вы увидите страницу «Поздравляем!» 
с взлетающей ракетой. Все получилось!

Сервер разработки автоматически перезагружает код Python для каждого запроса по мере необходимости. Вам не нужно перезагружать 
сервер, чтобы изменения в коде вступили в силу. Однако некоторые действия, такие как добавление файлов, в эти условия не входят, 
поэтому вам придется перезапустить сервер в этих случаях.


В чем разница между проектом и приложением? Приложение - это веб-приложение, которое что-то делает - например, система блогов, 
база данных публичных записей или небольшое приложение для проведения опросов. Проект - это набор конфигураций и приложений для 
определенного веб-сайта. Проект может содержать несколько приложений. Приложение может находиться в нескольких проектах.
Создание приложения: 
py manage.py startapp polls


Давайте напишем первое представление (view). Откройте файл polls/views.py и вставьте в него следующий код Python:

from django.http import HttpResponse


def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")


Это самое простое представление, возможное в Django. Чтобы вызвать представление, нам нужно сопоставить его с URL - и для этого 
нам нужен URLconf.

Чтобы создать URLconf в каталоге polls, создайте файл с именем urls.py. Ваш каталог с приложением должен выглядеть примерно так:

В файл polls/urls.py добавьте следующий код:

from django.urls import path

from . import views

urlpatterns = [
    path('', views.index, name='index'),
]

Следующим шагом является указание корневого URLconf на модуль polls.urls. В mysite/urls.py добавьте импорт django.urls.include 
и вставьте include() в список` urlpatterns`, у вас должно получиться так:

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('polls/', include('polls.urls')),
    path('admin/', admin.site.urls),
]


Функция path() передает четыре аргумента, два обязательных: route и view, и два необязательных: kwargs и name. На данный момент 
стоит рассмотреть, для чего эти аргументы.

Настройка базы данных

Теперь откройте mysite/settings.py. Это обычный модуль Python с переменными уровня модуля, представляющими настройки Django.
По умолчанию в конфигурации используется SQLite. Если вы новичок в базах данных или просто хотите попробовать Django, 
это самый простой выбор Однако при запуске первого реального проекта вы можете использовать более масштабируемую базу данных, 
такую как PostgreSQL, чтобы избежать проблем с переключением баз данных в будущем.
'django.db.backends.sqlite3', 'django.db.backends.postgresql'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'database_name',
        'USER': 'users_name',
        'PASSWORD': 'Users_password',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

Во время редактирования mysite/settings.py, установите TIME_ZONE в свой часовой пояс.

По умолчанию INSTALLED_APPS содержит следующие приложения, все из которых поставляются с Django:

django.contrib.admin - Администраторская часть сайта. Вскоре мы будем ее использовать.
django.contrib.auth - система аутентификации.
django.contrib.contenttypes - фреймворк типов данных.
django.contrib.sessions – фреймвор сессий.
django.contrib.messages – фреймворк сообщений.
django.contrib.staticfiles – фреймворк для работы со статическими файлами.

Некоторые из этих приложений используют хотя бы одну таблицу базы данных, поэтому нам необходимо создать таблицы в базе данных, 
прежде чем мы сможем их использовать. Для этого выполните следующую команду:
py manage.py migrate

Создание моделей
Теперь мы определим ваши модели – по сути, структуру вашей базы данных с дополнительными метаданными.
В нашем приложении для опроса мы создадим две модели: Question и Choice. Question содержит вопрос и дату публикации. Choice 
содержит два поля: текст выбора и подсчет голосов. Каждый Choice связан с Question.

from django.db import models


class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')


class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)